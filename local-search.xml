<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>原理图导入PCB常见错误</title>
    <link href="/2023/08/01/13-%E5%8E%9F%E7%90%86%E5%9B%BE%E5%AF%BCPCB%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <url>/2023/08/01/13-%E5%8E%9F%E7%90%86%E5%9B%BE%E5%AF%BCPCB%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1、元器件引脚与封装引脚不同"><a href="#1、元器件引脚与封装引脚不同" class="headerlink" title="1、元器件引脚与封装引脚不同"></a>1、元器件引脚与封装引脚不同</h2><blockquote><p>假设画元器件原理图时，引脚号为1，而在画元器件封装时，没有将封装的引脚号改成1，则会在导入PCB时出现Unknow的错误</p></blockquote><h2 id="2、元器件的位号问题"><a href="#2、元器件的位号问题" class="headerlink" title="2、元器件的位号问题"></a>2、元器件的位号问题</h2><blockquote><p>元器件位号Designator可以隐藏，但是不能填错，要正确填写好每个引脚的位号，特别是排插端口多引脚的情况，在画原理图时要留意每个引脚的位号，确保封装的位号和原理图中的位号一致，问题与上面差不多一致，不然也会出现Unknown的情况</p></blockquote><h2 id="3、PCB出现绿色报错"><a href="#3、PCB出现绿色报错" class="headerlink" title="3、PCB出现绿色报错"></a>3、PCB出现绿色报错</h2><blockquote><p>第一次从原理图导入PCB焊盘出现绿色报错并且显示&lt;10mil可能是因为规则要求焊盘之间的间距要大于10mil，可以通过Design（设计）-&gt; Rules（规则）-&gt; Design Rules -&gt; Electrical -&gt; Clearance -&gt; Clearance中修改焊盘最小间距，可以修改为6mil，或者直接在“忽略同一封装内的焊盘间距”选项上打勾</p></blockquote><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>画元器件原理图时，要注意位号Designator与封装一致，名字Name可以随意</p></li><li><p>画元器件封装时，要注意修改焊盘位号，与原理图位号保持一致</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>AD</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>结构体</title>
    <link href="/2023/07/13/12-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2023/07/13/12-%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h2 id="结构体的三种声明方式"><a href="#结构体的三种声明方式" class="headerlink" title="结构体的三种声明方式"></a>结构体的三种声明方式</h2><h3 id="声明方式一"><a href="#声明方式一" class="headerlink" title="声明方式一"></a>声明方式一</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">p</span>;</span><br></code></pre></td></tr></table></figure><h3 id="声明方式二"><a href="#声明方式二" class="headerlink" title="声明方式二"></a>声明方式二</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;p;<br></code></pre></td></tr></table></figure><p>此时p即为结构体变量，且后期无法通过结构体在创建其他变量，此声明方式很少使用</p><h3 id="声明方式三"><a href="#声明方式三" class="headerlink" title="声明方式三"></a>声明方式三</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;p;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">p1</span>;</span><br></code></pre></td></tr></table></figure><h2 id="使用typedef修改结构体声明"><a href="#使用typedef修改结构体声明" class="headerlink" title="使用typedef修改结构体声明"></a>使用typedef修改结构体声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">POINT</span>&#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;point;<br><br>point p;<br><br><span class="hljs-comment">//typedef</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> INT;<br>INT i = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>typedef可以修改声明数据类型名称，使结构体定义变量更加方便</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言字符串数组</title>
    <link href="/2023/07/10/11-C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/"/>
    <url>/2023/07/10/11-C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是字符串？"><a href="#什么是字符串？" class="headerlink" title="什么是字符串？"></a>什么是字符串？</h2><p>在C语言中没有直接的字符串数据类型，因此只能通过字符数组来代替字符串，通过以下定义可以初始化一个字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> p[] = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof = %d&quot;</span>, <span class="hljs-keyword">sizeof</span>(p)); <span class="hljs-comment">// 6</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof = %d&quot;</span>, <span class="hljs-built_in">strlen</span>(p)); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>字符数组的最后一位默认是’\0’，因此通过sizeof获取的数组长度为6，而strlen没有计算包括’\0’在内的长度，因此为5</p><hr><h2 id="怎么打印字符串？"><a href="#怎么打印字符串？" class="headerlink" title="怎么打印字符串？"></a>怎么打印字符串？</h2><p>通过printf(“%s”, p)即可打印出字符串，只需要传入字符串的首地址，直到遇到’\0’时打印结束</p><hr><h2 id="通过char-p-创建字符串数组"><a href="#通过char-p-创建字符串数组" class="headerlink" title="通过char *p[] 创建字符串数组"></a>通过char *p[] 创建字符串数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *p[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> a[] = &#123;<span class="hljs-string">&quot;hello world&quot;</span>&#125;;<br>p[<span class="hljs-number">0</span>] = a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, p[<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以打印出字符串”hello world”了，*p[10]其实是一个一维字符指针数组，p[0]存放的是char类型的一个一维数组地址。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>异常处理方式</title>
    <link href="/2023/06/25/10-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/06/25/10-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>51单片机内部时钟</title>
    <link href="/2023/06/14/09-51%E5%8D%95%E7%89%87%E6%9C%BA%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F/"/>
    <url>/2023/06/14/09-51%E5%8D%95%E7%89%87%E6%9C%BA%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1T模式和12T模式"><a href="#1T模式和12T模式" class="headerlink" title="1T模式和12T模式"></a>1T模式和12T模式</h2><p>1T 模式 (不分频) —— 1个系统基本时钟，执行一个动作；（速度更快）<br>12T模式(12分频) —— 12个系统基本时钟，执行一个动作；</p><p>即对定时器的时钟进行操作，假设单片机内部时钟为12M，使用12T模式则定时器时钟变为1M</p><p>定时器的两种计数速率：12T模式：每12个时钟计数器加1</p><p>​                                            1T模式：每1个时钟计数器加1</p><h3 id="AUXR：辅助寄存器"><a href="#AUXR：辅助寄存器" class="headerlink" title="AUXR：辅助寄存器"></a>AUXR：辅助寄存器</h3><p><img src="https://img-blog.csdnimg.cn/20210221143811660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JvY2hlcl8yMg==,size_16,color_FFFFFF,t_70"></p><p>用于配置定时器的分频系数</p><p>12T —— 8051定时器速度，12分频，输出频率=SYSclk / (65536 - T0) / 2<br>1T —— 8051定时器速度的12倍，不分频，输出频率=SYSclk / 12 / (65536 - T0) / 2</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FPGA开发软件安装</title>
    <link href="/2023/06/13/08-FPAG%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/13/08-FPAG%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h1><ol><li><p>Quartus II开发软件（13.0）</p></li><li><p>ModelSim仿真软件</p></li><li><p>Visio绘图软件</p></li><li><p>NotePad++代码编译器</p><p>百度网盘（所有软件安装包）：<a href="https://pan.baidu.com/s/1BMuxHKfc0l6WIMvvEEyU1w">https://pan.baidu.com/s/1BMuxHKfc0l6WIMvvEEyU1w</a><br>提取码：us8r</p></li></ol><h2 id="1、Quartus-II"><a href="#1、Quartus-II" class="headerlink" title="1、Quartus II"></a>1、Quartus II</h2><blockquote><p>官网地址：<a href="https://www.intel.com/content/www/us/en/collections/products/fpga/software/downloads.html?p=11">FPGA Software Download Center (intel.com)</a></p><p>建议选择13.版本</p><p><img src="C:\Users\hasee\AppData\Roaming\Typora\typora-user-images\image-20230612101424887.png" alt="image-20230612101424887"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>匿名类</title>
    <link href="/2023/04/29/07-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2023/04/29/07-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h1><h2 id="1、匿名子类"><a href="#1、匿名子类" class="headerlink" title="1、匿名子类"></a>1、匿名子类</h2><ul><li>提供一个匿名子类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//方法一</span><br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123;&#125;;<span class="hljs-comment">//中括号代表继承C的子类</span><br>c.method();<span class="hljs-comment">//调用的是父类中的method方法</span><br><br><span class="hljs-comment">//方法二：对象都一起匿名</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123;&#125;.method();<span class="hljs-comment">//匿名对象的匿名子类</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="2、匿名继承抽象类的子类"><a href="#2、匿名继承抽象类的子类" class="headerlink" title="2、匿名继承抽象类的子类"></a>2、匿名继承抽象类的子类</h2><ul><li>提供一个匿名继承抽象类的子类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//方法一</span><br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//对抽象类C的method方法进行重写</span><br>System.out.println(<span class="hljs-string">&quot;Sub C&quot;</span>);<br>&#125;<br>&#125;;<span class="hljs-comment">//中括号代表抽象类C的子类</span><br>c.method();<span class="hljs-comment">//调用的是匿名子类重写的method方法</span><br><br><span class="hljs-comment">//方法二：对象都一起匿名</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <span class="hljs-comment">//匿名对象的匿名子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <br>System.out.println(<span class="hljs-string">&quot;Sub C&quot;</span>);<br>&#125;<br>&#125;.method();<span class="hljs-comment">//在这里调用重写的method方法</span><br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="3、接口的匿名实现类"><a href="#3、接口的匿名实现类" class="headerlink" title="3、接口的匿名实现类"></a>3、接口的匿名实现类</h2><ul><li>提供一个接口的匿名实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//方法一</span><br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//对接口C的method方法进行重写</span><br>System.out.println(<span class="hljs-string">&quot;匿名实现类重写的方法method()&quot;</span>);<br>&#125;<br>&#125;;<br>c.method();<span class="hljs-comment">//调用的是匿名类重写的method方法</span><br><br><span class="hljs-comment">//方法二：提供接口匿名实现类的匿名对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <br>System.out.println(<span class="hljs-string">&quot;匿名实现类重写的方法method()&quot;</span>);<br>&#125;<br>&#125;.method();<span class="hljs-comment">//在这里调用重写的method方法</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中的高阶关键字</title>
    <link href="/2023/04/26/06-Java%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2023/04/26/06-Java%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Java中的高阶关键字"><a href="#Java中的高阶关键字" class="headerlink" title="Java中的高阶关键字"></a>Java中的高阶关键字</h1><ul><li><strong>1、static（静态）</strong></li><li><strong>2、extends（继承）</strong></li><li><strong>3、final（锁定）</strong></li><li><strong>4、abstract（抽象）</strong></li><li><strong>5、interface（接口）</strong></li><li><strong>6、implements（实现）</strong></li></ul><h2 id="1、static（静态）"><a href="#1、static（静态）" class="headerlink" title="1、static（静态）"></a>1、static（静态）</h2><blockquote><ul><li><p>修饰<strong>成员变量</strong>：声明成员变量为静态成员变量，即所有类共享该成员变量</p></li><li><p>修饰<strong>方法</strong>：声明方法为静态方法，即所有类共享该方法（静态方法中不能调用非静态成员）</p></li></ul><p>static修饰的属性和方法会在方法加载时一起加载，即不需要实例化也可以调用静态属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Chinese&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">nation</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;中国&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(nation);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(Chinese.nation);<span class="hljs-comment">//中国</span><br>    Chinese.Test();<span class="hljs-comment">//中国</span><br><span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>();<br><span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>();<br>System.out.println(c1.nation);<span class="hljs-comment">//中国</span><br>System.out.println(c2.nation);<span class="hljs-comment">//中国</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="2、extends（继承）"><a href="#2、extends（继承）" class="headerlink" title="2、extends（继承）"></a>2、extends（继承）</h2><blockquote><p>用于类与类的继承，假设A继承于SuperA，则拥有SuperA的属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperA</span>&#123;<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SuperA</span>&#123;&#125;<span class="hljs-comment">//A继承SuperA</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>System.out.println(a.b);<br>a.Test();<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="3、final（锁定）"><a href="#3、final（锁定）" class="headerlink" title="3、final（锁定）"></a>3、final（锁定）</h2><blockquote><ul><li>修饰<strong>类</strong>：表示此类无法被继承</li><li>修饰<strong>方法</strong>：表示该方法无法被重写</li><li>修饰<strong>变量</strong>：将变量变成常量，修饰后无法在赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<span class="hljs-comment">//Error：类A不能被继承</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-comment">//Error：该方法不能重写</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="4、abstract（抽象）"><a href="#4、abstract（抽象）" class="headerlink" title="4、abstract（抽象）"></a>4、abstract（抽象）</h2><blockquote><ul><li><p>修饰<strong>类</strong>：声明此类为抽象类</p><blockquote><ol><li>抽象类不能<em><strong>实例化</strong></em></li><li>抽象类中是包含构造器的</li><li>抽象类中可以没有抽象方法，反之抽象方法所在的类，一定是抽象类</li></ol></blockquote></li><li><p>修饰<strong>方法</strong>：声明此方法为抽象方法</p><blockquote><ol><li>抽象方法只有方法的声明，没有方法体（不写大括号）</li><li>抽象方法的功能是确定的</li><li>子类必须重写父类的所有抽象方法之后，方可实例化</li></ol></blockquote></li></ul><p>abstract不能修饰：<em>属性、构造器、代码块</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;&#125;;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="5、interface（接口）"><a href="#5、interface（接口）" class="headerlink" title="5、interface（接口）"></a>5、interface（接口）</h2><blockquote><ul><li>修饰<strong>类</strong>：声明类为接口类（实现该接口的类称为实现类）</li></ul><blockquote><ul><li>类可以实现多个接口</li><li>类针对接口的多实现，一定程度上弥补了单继承的局限性</li><li>类必须将实现的接口中额所有抽象方法都重写（或实现），方可实例化，否则此实现类必须声明为抽象类</li><li>接口类没有构造器</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span>&#123;<br><span class="hljs-comment">//属性public static final可以省略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_SPEED</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//方法public abstract可以省略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="6、implements（实现）"><a href="#6、implements（实现）" class="headerlink" title="6、implements（实现）"></a>6、implements（实现）</h2><blockquote><p>用于表示类对接口的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<span class="hljs-comment">//A类对上面的USB接口进行实现</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-comment">//必须重写start()</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>方法的重载和重写</title>
    <link href="/2023/04/18/05-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/"/>
    <url>/2023/04/18/05-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="方法的重载和重写"><a href="#方法的重载和重写" class="headerlink" title="方法的重载和重写"></a>方法的重载和重写</h1><h2 id="重载（overload）"><a href="#重载（overload）" class="headerlink" title="重载（overload）"></a>重载（overload）</h2><blockquote><p>对方法的重载遵循“<strong>两同一不同</strong>“原则，即：</p><p>——同一个类，同一个方法</p><p>——不同参数（只有形参名称不同不构成重载）</p><p>使得再调用方法时会根据参数不同自动选择相应的方法，例如一个add方法的重载：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 对add方法进行重载</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span>&#123;<br><span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">double</span> k = <span class="hljs-number">1.1</span>;p = <span class="hljs-number">2.2</span>;<br><span class="hljs-keyword">add</span>(i,j);<br><span class="hljs-keyword">add</span>(k,p);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j</span>)</span>&#123;<br><span class="hljs-keyword">return</span> i+j;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> i,<span class="hljs-built_in">double</span> j</span>)</span>&#123;<br><span class="hljs-keyword">return</span> i+j;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="重写（override）"><a href="#重写（override）" class="headerlink" title="重写（override）"></a>重写（override）</h2><blockquote><p>子类对父类方法进行重写，覆盖父类的方法，重写方法遵循：</p><p>与父类方法名相同、参数相同、返回值类型相同，只改变方法的实现，例如student对person的study方法进行重写：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>public void study()&#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;老师学习&quot;</span>)<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-comment">//对父类Person的study进行重写,Override是标记而已</span><br><span class="hljs-meta">@Override</span><br>public void study()&#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;学生学习&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python调用chatGPT接口</title>
    <link href="/2023/04/17/04-Python%E8%B0%83%E7%94%A8chatGPT/"/>
    <url>/2023/04/17/04-Python%E8%B0%83%E7%94%A8chatGPT/</url>
    
    <content type="html"><![CDATA[<h2 id="调用Completion实现"><a href="#调用Completion实现" class="headerlink" title="调用Completion实现"></a>调用Completion实现</h2><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><p><img src="https://i.postimg.cc/FRwL7YD6/2023-04-17-143517.png" alt="2023-04-17-143517.png"></p><p>出现以下错误时：</p><blockquote><p>openai.error.APIConnectionError: Error communicating with OpenAI: HTTPSConnectionPool(host=’<a href="https://link.zhihu.com/?target=http://api.openai.com/">api.openai.com</a>‘, port=443): Max retries exceeded with url: /v1/engines/text-davinci-003/completions (Caused by NewConnectionError(‘&lt;urllib3.connection.HTTPSConnection object at 0x000001F13B451100&gt;: Failed to establish a new connection: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。’))</p></blockquote><p>可以尝试以下解决方法</p><h3 id="1、降低urllib3版本到1-25-11"><a href="#1、降低urllib3版本到1-25-11" class="headerlink" title="1、降低urllib3版本到1.25.11"></a>1、降低urllib3版本到1.25.11</h3><blockquote><p>通过使用pip list查看urllib3版本</p><p><img src="https://i.postimg.cc/W1DJST1c/2023-04-17-133525.png" alt="2023-04-17-133525" title="查看urllib3版本"></p><p>在使用以下指令降低urllib3版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install urllib3==1.25.11<br></code></pre></td></tr></table></figure></blockquote><h3 id="2、开启魔法上网"><a href="#2、开启魔法上网" class="headerlink" title="2、开启魔法上网"></a>2、开启魔法上网</h3><blockquote><p>调用API接口之前记得开启代理服务器，才能正常获取返回的数据</p></blockquote><hr><h2 id="调用ChatCompletion实现上下文对话"><a href="#调用ChatCompletion实现上下文对话" class="headerlink" title="调用ChatCompletion实现上下文对话"></a>调用ChatCompletion实现上下文对话</h2><h3 id="1、确保openai版本为0-27-0以上"><a href="#1、确保openai版本为0-27-0以上" class="headerlink" title="1、确保openai版本为0.27.0以上"></a>1、确保openai版本为0.27.0以上</h3><blockquote><p>可以通过<em>pip list</em>查看安装的openai库的版本<img src="https://i.postimg.cc/TPczZBR2/2023-04-17-171923.png" alt="2023-04-17-171923.png" title="查看版本"></p><p>当发现版本为0.8.0时需要进行升级，通过pip3 install –upgrade openai自动安装不稳定（因为我一直失败），所以建议手动安装：</p><blockquote><p>通过:<a href="https://pypi.org/project/openai/#files%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84openai%E5%BA%93">https://pypi.org/project/openai/#files下载最新版本的openai库</a></p><p>在通过：pip3 install openai-0.27.4-py3-none-any.whl 进行安装（后面这个文件名不一定一样，要根据你下载的文件进行安装）</p></blockquote><p>当安装时出现<img src="https://i.postimg.cc/XNwn815J/2023-04-17-172353.png" alt="2023-04-17-172353.png"></p><p>表示你的python版本过低，需要升级至3.7.1以上</p></blockquote><h3 id="2、安装最新版的Anaconda"><a href="#2、安装最新版的Anaconda" class="headerlink" title="2、安装最新版的Anaconda"></a>2、安装最新版的Anaconda</h3><blockquote><p>安装最新版的Anaconda通过<em>pip install openai</em>指令即可安装最新版的openai（0.27.0）版本</p></blockquote><p>最终实现效果:<img src="https://i.postimg.cc/vTr7QgcL/2023-04-17-200837.png" alt="2023-04-17-200837.png"></p><h3 id="源码：-1"><a href="#源码：-1" class="headerlink" title="源码："></a>源码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">import</span> os<br><br>OPENAI_API_KEY=<span class="hljs-string">&quot;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&quot;</span><br>openai.api_key = os.getenv(<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>,OPENAI_API_KEY)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,conversation_list=[]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># self.conversation_list = [&#123;&#x27;role&#x27;:&#x27;system&#x27;,&#x27;content&#x27;:&#x27;你是一个非常友善的助手&#x27;&#125;]</span><br>        self.conversation_list = []<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_conversation</span>(<span class="hljs-params">self,msg_list</span>):<br>        <span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> msg_list:<br>            <span class="hljs-keyword">if</span> msg[<span class="hljs-string">&#x27;role&#x27;</span>] == <span class="hljs-string">&#x27;user&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47b: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">self,prompt</span>):<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:prompt&#125;)<br>        response = openai.ChatCompletion.create(model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,messages=self.conversation_list)<br>        answer = response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&#x27;content&#x27;</span>]<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;assistant&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:answer&#125;)<br>        <span class="hljs-comment">#self.show_conversation(self.conversation_list)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;self.conversation_list[-<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>) <br>        <span class="hljs-comment">#print(self.conversation_list)</span><br><br>c = Chat()<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    problem = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\U0001f47b：&quot;</span>)<br>    c.ask(problem)<br></code></pre></td></tr></table></figure><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><h3 id="1、token长度不能超过4096"><a href="#1、token长度不能超过4096" class="headerlink" title="1、token长度不能超过4096"></a>1、token长度不能超过4096</h3><p>会出现以下报错：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">InvalidRequestError: This model&#x27;s maximum <span class="hljs-built_in">context</span> <span class="hljs-built_in">length</span> <span class="hljs-built_in">is</span> <span class="hljs-number">4097</span> <span class="hljs-built_in">tokens</span>. However, your messages resulted <span class="hljs-keyword">in</span> <span class="hljs-number">4114</span> <span class="hljs-built_in">tokens</span>. Please reduce the <span class="hljs-built_in">length</span> of the messages.<br></code></pre></td></tr></table></figure><blockquote><p>在调用ChatCompletion实现上下文时，我们需要将之前的数据记录在字典中，在发送问题时同时将该字典一起发送才能实现上下文，但这样会导致消息越来越多，字典越来越长，产生的token也就越来越长，当出现token超过4096时在继续发送请求会出现的错误，因此需要注意控制token的长度。当token过长时可以通过去掉最前面的消息记录来减少，或者通过官网付费购买tokne解决。</p></blockquote><p>解决方法参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@name:Chen JiaWei</span><br><span class="hljs-string">@date:2023/04/18</span><br><span class="hljs-string">@version:2.0</span><br><span class="hljs-string">    解决token过长问题：当token的长度超过token_maxLen时列表除索引0外全部向前移动两位，覆盖最前面的消息记录，同时删除最后两个字典</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">import</span> os<br><br>OPENAI_API_KEY=<span class="hljs-string">&quot;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&quot;</span><br>openai.api_key = os.getenv(<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>,OPENAI_API_KEY)<br><br>token_maxLen = <span class="hljs-number">3400</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,conversation_list=[]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.conversation_list = [&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&#x27;你是一个资深的股票分析师&#x27;</span>&#125;]<br>        <span class="hljs-comment">#self.conversation_list = []</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_conversation</span>(<span class="hljs-params">self,msg_list</span>):<br>        <span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> msg_list:<br>            <span class="hljs-keyword">if</span> msg[<span class="hljs-string">&#x27;role&#x27;</span>] == <span class="hljs-string">&#x27;user&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47b: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">self,prompt</span>):<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:prompt&#125;)<br>        response = openai.ChatCompletion.create(model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,messages=self.conversation_list)<br>        token_light = response.get(<span class="hljs-string">&quot;usage&quot;</span>)[<span class="hljs-string">&quot;total_tokens&quot;</span>] <span class="hljs-comment"># token长度</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;token长度：<span class="hljs-subst">&#123;token_light&#125;</span>&quot;</span>)<br>        answer = response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&#x27;content&#x27;</span>]<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;assistant&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:answer&#125;)<br>        <span class="hljs-comment">#self.show_conversation(self.conversation_list)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;self.conversation_list[-<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>) <br>        <br>        <span class="hljs-comment"># 当token大于3200时将整体记录往前移，覆盖最早的消息记录</span><br>        <span class="hljs-keyword">if</span> token_light &gt; token_maxLen:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(self.conversation_list)-<span class="hljs-number">2</span>):<br>                self.conversation_list[i] = self.conversation_list[i+<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">del</span> self.conversation_list[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">del</span> self.conversation_list[-<span class="hljs-number">1</span>]<br><br>c = Chat()<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    problem = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\U0001f47b：&quot;</span>)<br>    c.ask(problem)<br></code></pre></td></tr></table></figure><h3 id="2、1min内访问次数不能太多"><a href="#2、1min内访问次数不能太多" class="headerlink" title="2、1min内访问次数不能太多"></a>2、1min内访问次数不能太多</h3><p>会出现以下报错：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">RateLimitError: Rate limit reached <span class="hljs-keyword">for</span> <span class="hljs-keyword">default</span>-gpt-<span class="hljs-number">3.5</span>-turbo <span class="hljs-keyword">in</span> organization org-RWIdW4eeUKB8VeTMHou6l2la <span class="hljs-keyword">on</span> requests per min. Limit: <span class="hljs-number">3</span> / min. Please <span class="hljs-keyword">try</span> again <span class="hljs-keyword">in</span> <span class="hljs-number">20</span>s. Contact support@openai.com <span class="hljs-keyword">if</span> you <span class="hljs-keyword">continue</span> <span class="hljs-keyword">to</span> have issues. Please <span class="hljs-keyword">add</span> a payment <span class="hljs-keyword">method</span> <span class="hljs-title function_">to</span> <span class="hljs-title function_">your</span> <span class="hljs-title function_">account</span> <span class="hljs-title function_">to</span> <span class="hljs-title function_">increase</span> <span class="hljs-title function_">your</span> <span class="hljs-title function_">rate</span> <span class="hljs-title function_">limit</span>. <span class="hljs-title function_">Visit</span> <span class="hljs-title function_">https</span>:<span class="hljs-comment">//platform.openai.com/account/billing to add a payment method.</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Python类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenAI注册获取ChatGPT的API密钥</title>
    <link href="/2023/04/16/03-chatGPT%E6%B3%A8%E5%86%8C%E8%8E%B7%E5%8F%96Key/"/>
    <url>/2023/04/16/03-chatGPT%E6%B3%A8%E5%86%8C%E8%8E%B7%E5%8F%96Key/</url>
    
    <content type="html"><![CDATA[<ol><li>魔法上网</li><li>注册Google邮箱</li><li>接码平台接码</li></ol><h2 id="1、魔法上网"><a href="#1、魔法上网" class="headerlink" title="1、魔法上网"></a>1、魔法上网</h2><blockquote><p>2023年最新告诉稳定科学上网机场推荐</p><blockquote><p><em>桔子云</em> ：[点击直达桔子云官网](<a href="https://juzi27.com/user">首页 — 桔子云 (juzi27.com)</a>)</p><p><em>机场巴巴</em> ：[点击直达机场巴巴官网](<a href="https://www.ckcloud.cc/#/register?code=DS5DLTxi">JCBB (ckcloud.cc)</a>)</p><p><em>XRelay</em> ：[点击直达XRelay官网](<a href="https://isseys.net/#/register?code=LIE3Pyo2">xrelay (isseys.net)</a>)</p><p>推荐使用<strong>机场巴巴</strong>：新用户注册可免费试用一天，window建议使用V2Ray，按照官网教程操作即可成功访问外网</p></blockquote></blockquote><hr><h2 id="2、注册Google邮箱"><a href="#2、注册Google邮箱" class="headerlink" title="2、注册Google邮箱"></a>2、注册Google邮箱</h2><blockquote><p>为什么不使用QQ邮箱呢？</p><blockquote><p>因为目前ChatGPT大流行，OpenAi官网对部分邮箱进行了限制，当你使用QQ邮箱注册时会提示你【**Signup is currently unavailable, please try again later.**】，因此我们需要注册一个Google邮箱来注册OpenAi官网账号</p></blockquote></blockquote><h3 id="2-1、进入谷歌邮箱界面"><a href="#2-1、进入谷歌邮箱界面" class="headerlink" title="2.1、进入谷歌邮箱界面"></a>2.1、进入谷歌邮箱界面</h3><p>网址：<a href="https://mail.google.com/">https://mail.google.com</a></p><h3 id="2-2、按照提示正常注册即可"><a href="#2-2、按照提示正常注册即可" class="headerlink" title="2.2、按照提示正常注册即可"></a>2.2、按照提示正常注册即可</h3><p>谷歌邮箱可以使用国内的手机进行注册，当出现异常时，可以通过变换当前节点，重启电脑，或者清除浏览器数据（建议使用谷歌浏览器）</p><hr><h2 id="3、接码平台接码"><a href="#3、接码平台接码" class="headerlink" title="3、接码平台接码"></a>3、接码平台接码</h2><blockquote><p>为什么不使用SMS接码平台接码？</p><blockquote><p>因为里面的手机号已经被接烂了，大部分的手机号都已经被使用过了，在2023年2月份或许还能通过SMS接码注册，但在3、4月份已经很少还有手机号可以用于注册，会出现接收不到验证码的情况，并且最低充值2USD，差不多14RMB，因此不建议使用SMS接码</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java数组内存解析</title>
    <link href="/2023/04/06/02-Java%E6%95%B0%E7%BB%84%E5%A0%86%E5%92%8C%E6%A0%88/"/>
    <url>/2023/04/06/02-Java%E6%95%B0%E7%BB%84%E5%A0%86%E5%92%8C%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>堆</strong>：用于存放数组中的元素<br><strong>栈</strong>：用于存放方法中产生的局部变量</p></blockquote><hr><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>arr数组变量存放在属于main的<strong>栈</strong>中，而数组元素{1，2，3}则存放在<strong>堆</strong>中</p><p>arr数字的值只是数组元素在<strong>堆</strong>中的第一个元素的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = arr;<br></code></pre></td></tr></table></figure><p>该操作只是将arr的值给到arr1而已，并未通过new在堆中重新开辟新空间</p><hr><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>1）外部元素，默认存储的内部一维数组地址值</p><p>2）内部元素，默认与一维数组元素类型不同的默认值规定一致</p><p><strong>即arr[0]是外部元素，存储的是堆中{1，2，3}的地址</strong></p><p>arr【0】【0】则跟一维数组一样，是数值1，而不是地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br></code></pre></td></tr></table></figure><blockquote><p>此时的arr1[0] 则为null（arr1[1]arr1[2]也一样）</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo的博客</title>
    <link href="/2023/04/06/01-Hexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/04/06/01-Hexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="创建一个属于自己的博客"><a href="#创建一个属于自己的博客" class="headerlink" title="创建一个属于自己的博客"></a>创建一个属于自己的博客</h1><h2 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h2><h3 id="1-1、软件安装"><a href="#1-1、软件安装" class="headerlink" title="1.1、软件安装"></a>1.1、软件安装</h3><p>1.1.1、<strong>Nodejs</strong> : <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>1.1.2、<strong>Git</strong> : <a href="https://www.gitclone.com/docs/feature/github_git">https://www.gitclone.com/docs/feature/github_git</a></p><p>1.1.3、<strong>VSCode</strong> : <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> (也可以用别的编辑器)</p><h3 id="1-2、指令操作"><a href="#1-2、指令操作" class="headerlink" title="1.2、指令操作"></a>1.2、指令操作</h3><p>1.2.1、<strong>安装cnpm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>1.2.2、<strong>安装hexo</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>(卡住时也可以选择通过克隆安装)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/hexojs/hexo-starter.git ./<br></code></pre></td></tr></table></figure><p>1.2.3、<strong>初始化hexo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bas">hexo init<br></code></pre></td></tr></table></figure><p>1.2.4、<strong>预览博客</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><h3 id="1-3、安装主题"><a href="#1-3、安装主题" class="headerlink" title="1.3、安装主题"></a>1.3、安装主题</h3><p>在<a href="https://hexo.io/themes/%E4%B8%AD%E6%8C%91%E9%80%89%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%BB%E9%A2%98">https://hexo.io/themes/中挑选喜欢的主题</a></p><h2 id="2、上传博客"><a href="#2、上传博客" class="headerlink" title="2、上传博客"></a>2、上传博客</h2><h3 id="2-1、创建仓库"><a href="#2-1、创建仓库" class="headerlink" title="2.1、创建仓库"></a>2.1、创建仓库</h3><p>在<a href="http://github.com上创建仓库/">http://github.com上创建仓库</a></p><h3 id="2-2、配置密钥信息"><a href="#2-2、配置密钥信息" class="headerlink" title="2.2、配置密钥信息"></a>2.2、配置密钥信息</h3><p>2.2.1、出现hexo d上传不了的情况：可以尝试使用以下命令重新生成ssh密钥，邮箱换成自己的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C “ 邮箱“<br></code></pre></td></tr></table></figure><p>用于在本机生成密钥，生成在user/.ssh/id_rsa.pub文件中，复制里面的密钥在去GitHub中生成ssh Key即可</p><p><a href="https://imgse.com/i/pCm7MOP"><img src="https://s1.ax1x.com/2023/06/13/pCm7MOP.png" alt="pCm7MOP.png"></a></p><p>2.2.2、name随便写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email&quot;</span><br></code></pre></td></tr></table></figure><p>（具体操作参考<a href="https://www.bilibili.com/video/BV14G4y167b4/?spm_id_from=333.788&vd_source=fedd61ea761f3e4d96d202a264797a9d">【零基础】保姆级搭建个人博客hexo第三集_哔哩哔哩_bilibili</a>）</p><h3 id="2-3、指令上传"><a href="#2-3、指令上传" class="headerlink" title="2.3、指令上传"></a>2.3、指令上传</h3><p>用于下载上传插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="3、网站地址"><a href="#3、网站地址" class="headerlink" title="3、网站地址"></a>3、网站地址</h2><h3 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h3><p>网址：<a href="https://vercel.com/">https://vercel.com/</a> 用GitHub登录</p><p>通过腾讯云购买域名解析或者使用默认网址</p><h2 id="4、上传指令"><a href="#4、上传指令" class="headerlink" title="4、上传指令"></a>4、上传指令</h2><h3 id="4-1、启动本地服务器，用于预览主题"><a href="#4-1、启动本地服务器，用于预览主题" class="headerlink" title="4.1、启动本地服务器，用于预览主题"></a>4.1、启动本地服务器，用于预览主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><h3 id="4-2、生成网站静态文件到默认设置的public文件夹中"><a href="#4-2、生成网站静态文件到默认设置的public文件夹中" class="headerlink" title="4.2、生成网站静态文件到默认设置的public文件夹中"></a>4.2、生成网站静态文件到默认设置的public文件夹中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h3 id="4-3、自动生成网站静态文件，并部署到设定的仓库"><a href="#4-3、自动生成网站静态文件，并部署到设定的仓库" class="headerlink" title="4.3、自动生成网站静态文件，并部署到设定的仓库"></a>4.3、自动生成网站静态文件，并部署到设定的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><h3 id="4-4、清除缓存文件db-json和已生成的静态文件public"><a href="#4-4、清除缓存文件db-json和已生成的静态文件public" class="headerlink" title="4.4、清除缓存文件db.json和已生成的静态文件public"></a>4.4、清除缓存文件db.json和已生成的静态文件public</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>笔记类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2013/07/13/hello-world/"/>
    <url>/2013/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>那是对你撒旦打撒</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
