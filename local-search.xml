<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FreeRTOS-01_动态创建函数</title>
    <link href="/2023/09/24/18-FreeRTOS-01_%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/"/>
    <url>/2023/09/24/18-FreeRTOS-01_%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1、相关API函数"><a href="#1、相关API函数" class="headerlink" title="1、相关API函数"></a>1、相关API函数</h1><h2 id="1-1、xTaskCreate"><a href="#1-1、xTaskCreate" class="headerlink" title="1.1、xTaskCreate()"></a>1.1、xTaskCreate()</h2><p><strong>任务创建函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BaseType_t <span class="hljs-title">xTaskCreate</span><span class="hljs-params">(TaskFunction_t pxTaskCode,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> pcName,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">uint16_t</span> usStackDepth,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">void</span> * <span class="hljs-type">const</span> pvParameters,</span></span><br><span class="hljs-params"><span class="hljs-function">UBaseType_t uxPriority,</span></span><br><span class="hljs-params"><span class="hljs-function">TaskHandle_t * <span class="hljs-type">const</span> pxCreatedTask )</span></span><br></code></pre></td></tr></table></figure><p><em>功能</em>&emsp;：动态创建任务<br><em>返回值</em>：BaseType_t 类型{<br>&emsp;&emsp;pdPASS：说明任务创建成功；<br>&emsp;&emsp;errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY：说明任务创建失败；<br>    }<br><em>参数</em>&emsp;：</p><ul><li>pxTaskCode：任务函数</li><li>pcName：任务名称</li><li>usStackDepth：任务堆栈大小（单位为字节）</li><li>pvParameters：任务函数参数（一般为空NULL）</li><li>uxPriority：任务优先级（越大优先级越高）</li><li>pxCreatedTask：任务控制句柄（相当于任务的身份证）</li></ul><h2 id="1-2、vTaskStartScheduler"><a href="#1-2、vTaskStartScheduler" class="headerlink" title="1.2、vTaskStartScheduler()"></a>1.2、vTaskStartScheduler()</h2><p><strong>任务调度器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">vTaskStartScheduler</span><span class="hljs-params">( <span class="hljs-keyword">void</span> )</span><br></code></pre></td></tr></table></figure><p><em>功能</em>：开启任务调度<br><em>无返回值无参</em></p><h2 id="1-3、vTaskDelete"><a href="#1-3、vTaskDelete" class="headerlink" title="1.3、vTaskDelete()"></a>1.3、vTaskDelete()</h2><p><strong>任务删除函数</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">void</span> <span class="hljs-function"><span class="hljs-title">vTaskDelete</span>( <span class="hljs-variable">TaskHandle_t</span> <span class="hljs-variable">xTaskToDelete</span> )</span><br></code></pre></td></tr></table></figure><p><em>功能</em>：删除任务<br><em>无返回值</em><br><em>参数</em>&emsp;：</p><ul><li>xTaskToDelete：任务控制句柄，如果句柄为空NULL则删除目前所在的任务本身（不过不会立刻删除，会等待当前任务执行完毕再删除当前任务）</li></ul><h2 id="1-4、vTaskDelay"><a href="#1-4、vTaskDelay" class="headerlink" title="1.4、vTaskDelay()"></a>1.4、vTaskDelay()</h2><p><strong>相对延时函数</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void v<span class="hljs-constructor">TaskDelay( <span class="hljs-params">const</span> TickType_t <span class="hljs-params">xTicksToDelay</span> )</span><br></code></pre></td></tr></table></figure><p><em>功能</em>：任务延迟，其实就是将任务挂起，让出内核的使用权<br><em>无返回值</em><br><em>参数</em>&emsp;：</p><ul><li>xTicksToDelay ：要延迟的时间，单位ms</li></ul><h2 id="1-5、taskENTER-CRITICAL"><a href="#1-5、taskENTER-CRITICAL" class="headerlink" title="1.5、taskENTER_CRITICAL();"></a>1.5、taskENTER_CRITICAL();</h2><p><strong>进入临界区</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">taskENTER_CRITICAL</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><em>功能</em>：关中断，进入临界区，防止临界段代码被其他任务打断（一般用于一开始创建运行任务时的创建任务函数，当运行任务全部创建完成后再重新退出临界区）<br><em>无返回值无参</em></p><h2 id="1-6、taskEXIT-CRITICAL"><a href="#1-6、taskEXIT-CRITICAL" class="headerlink" title="1.6、taskEXIT_CRITICAL();"></a>1.6、taskEXIT_CRITICAL();</h2><p><strong>退出临界区</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">taskEXIT_CRITICAL</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><em>功能</em>：开中断，退出临界区<br><em>无返回值无参</em></p><h1 id="2、操作流程"><a href="#2、操作流程" class="headerlink" title="2、操作流程"></a>2、操作流程</h1><h2 id="2-1、相应宏设置开启"><a href="#2-1、相应宏设置开启" class="headerlink" title="2.1、相应宏设置开启"></a>2.1、相应宏设置开启</h2><p><strong>configSUPPORT_DYNAMIC_ALLOCATION &emsp;&emsp;&emsp;1</strong><br><em>功能</em>：动态内存申请相关宏定义，要使用动态创建任务该宏需置一</p><h2 id="2-2、创建宏定义参数变量"><a href="#2-2、创建宏定义参数变量" class="headerlink" title="2.2、创建宏定义参数变量"></a>2.2、创建宏定义参数变量</h2><p>提前宏定义任务所需的参数<br>例如：</p><ul><li>START_TASK_PRIO        &emsp;&emsp;&emsp;&emsp;&ensp;       <em>任务优先级</em></li><li>START_TASK_STACK_SIZE     &emsp;<em>任务堆栈大小</em></li><li>start_task_handler &emsp;&emsp;&emsp;&emsp;&emsp;&ensp;<em>任务句柄</em></li><li>void start_task(void * pvParameters);&emsp;<em>任务执行函数</em><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*START_TASK*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> START_TASK_PRIO1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> START_TASK_STACK_SIZE 128</span><br>TaskHandle_t start_task_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">start_task</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br><br><span class="hljs-comment">/*TASK1*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK1_PRIO2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK1_STACK_SIZE 128</span><br>TaskHandle_t task1_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task1</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br><span class="hljs-comment">/*TASK2*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK2_PRIO3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK2_STACK_SIZE 128</span><br>TaskHandle_t task2_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task2</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br><span class="hljs-comment">/*TASK3*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK3_PRIO4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK3_STACK_SIZE 128</span><br>TaskHandle_t task3_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task3</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-3、创建开始任务并开启任务调度器"><a href="#2-3、创建开始任务并开启任务调度器" class="headerlink" title="2.3、创建开始任务并开启任务调度器"></a>2.3、创建开始任务并开启任务调度器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">freertos_demo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>BaseType_t xReturned = xTaskCreate((TaskFunction_t) start_task,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;start_task&quot;</span>,<br>(<span class="hljs-type">uint16_t</span>) START_TASK_STACK_SIZE,<br>(<span class="hljs-type">void</span> *) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) START_TASK_PRIO,<br>(TaskHandle_t *) &amp;start_task_handler ); <br><span class="hljs-keyword">if</span>(xReturned == pdPASS)<br>vTaskStartScheduler();<span class="hljs-comment">//开启任务调度器</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始任务创建失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4、在开启任务中创建执行任务"><a href="#2-4、在开启任务中创建执行任务" class="headerlink" title="2.4、在开启任务中创建执行任务"></a>2.4、在开启任务中创建执行任务</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">start_task</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123;<br>taskENTER_CRITICAL();<span class="hljs-comment">/* 进入临界区 防止创建任务过程被打断 */</span><br>xTaskCreate((TaskFunction_t) task1,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;task1&quot;</span>,<br>(<span class="hljs-type">uint16_t</span> ) TASK1_STACK_SIZE,<br>(<span class="hljs-type">void</span> * ) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) TASK1_PRIO,<br>(TaskHandle_t *) &amp;task1_handler );<br><br>xTaskCreate((TaskFunction_t) task2,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;task2&quot;</span>,<br>(<span class="hljs-type">uint16_t</span> ) TASK2_STACK_SIZE,<br>(<span class="hljs-type">void</span> * ) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) TASK2_PRIO,<br>(TaskHandle_t *) &amp;task2_handler );<br><br>xTaskCreate((TaskFunction_t) task3,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;task3&quot;</span>,<br>(<span class="hljs-type">uint16_t</span> ) TASK3_STACK_SIZE,<br>(<span class="hljs-type">void</span> * ) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) TASK3_PRIO,<br>(TaskHandle_t *) &amp;task3_handler );<br>vTaskDelete(<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//删除自己</span><br>taskEXIT_CRITICAL();<span class="hljs-comment">/* 退出临界区 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5、编写任务函数"><a href="#2-5、编写任务函数" class="headerlink" title="2.5、编写任务函数"></a>2.5、编写任务函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">task1</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>;<br> &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task2</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>;<br> &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task3</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123; <br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、点灯示例代码"><a href="#3、点灯示例代码" class="headerlink" title="3、点灯示例代码"></a>3、点灯示例代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**************************************************************/</span><br><span class="hljs-comment">/*START_TASK*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> START_TASK_PRIO1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> START_TASK_STACK_SIZE 128</span><br>TaskHandle_t start_task_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">start_task</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br><br><span class="hljs-comment">/*TASK1*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK1_PRIO2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK1_STACK_SIZE 128</span><br>TaskHandle_t task1_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task1</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br><span class="hljs-comment">/*TASK2*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK2_PRIO3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK2_STACK_SIZE 128</span><br>TaskHandle_t task2_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task2</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br><span class="hljs-comment">/*TASK3*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK3_PRIO4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK3_STACK_SIZE 128</span><br>TaskHandle_t task3_handler;<br><span class="hljs-type">void</span> <span class="hljs-title function_">task3</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span>;<br><span class="hljs-comment">/**************************************************************/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">freertos_demo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>BaseType_t xReturned = xTaskCreate((TaskFunction_t) start_task,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;start_task&quot;</span>,<br>(<span class="hljs-type">uint16_t</span>) START_TASK_STACK_SIZE,<br>(<span class="hljs-type">void</span> *) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) START_TASK_PRIO,<br>(TaskHandle_t *) &amp;start_task_handler ); <br><span class="hljs-keyword">if</span>(xReturned == pdPASS)<br>vTaskStartScheduler();<span class="hljs-comment">//开启任务调度器</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始任务创建失败&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">start_task</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123;<br>taskENTER_CRITICAL();<span class="hljs-comment">/* ½øÈëÁÙ½çÇø */</span><br>xTaskCreate((TaskFunction_t) task1,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;task1&quot;</span>,<br>(<span class="hljs-type">uint16_t</span> ) TASK1_STACK_SIZE,<br>(<span class="hljs-type">void</span> * ) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) TASK1_PRIO,<br>(TaskHandle_t *) &amp;task1_handler );<br><br>xTaskCreate((TaskFunction_t) task2,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;task2&quot;</span>,<br>(<span class="hljs-type">uint16_t</span> ) TASK2_STACK_SIZE,<br>(<span class="hljs-type">void</span> * ) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) TASK2_PRIO,<br>(TaskHandle_t *) &amp;task2_handler );<br><br>xTaskCreate((TaskFunction_t) task3,<br>(<span class="hljs-type">char</span> *  ) <span class="hljs-string">&quot;task3&quot;</span>,<br>(<span class="hljs-type">uint16_t</span> ) TASK3_STACK_SIZE,<br>(<span class="hljs-type">void</span> * ) <span class="hljs-literal">NULL</span>,<br>(UBaseType_t ) TASK3_PRIO,<br>(TaskHandle_t *) &amp;task3_handler );<br>vTaskDelete(<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//É¾³ý×ÔÉí</span><br>taskEXIT_CRITICAL();<span class="hljs-comment">/* ÍË³öÁÙ½çÇø */</span><br>&#125;<br><span class="hljs-comment">/*任务一：LED0每500ms翻转一次*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">task1</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;任务一运行中！！！\r\n&quot;</span>);<br>GPIO_SetBits(GPIOB,GPIO_Pin_12);<br>vTaskDelay(<span class="hljs-number">500</span>);<br>GPIO_ResetBits(GPIOB,GPIO_Pin_12);<br>vTaskDelay(<span class="hljs-number">500</span>);<br> &#125;<br>&#125;<br><span class="hljs-comment">/*任务一：LED1每500ms翻转一次*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">task2</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;任务二运行中！！！\r\n&quot;</span>);<br>GPIO_SetBits(GPIOB,GPIO_Pin_13);<br>vTaskDelay(<span class="hljs-number">500</span>);<br>GPIO_ResetBits(GPIOB,GPIO_Pin_13);<br>vTaskDelay(<span class="hljs-number">500</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*任务三：按下KEY0删除任务1*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">task3</span><span class="hljs-params">(<span class="hljs-type">void</span> * pvParameters)</span><br>&#123; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;任务三运行中！！！\r\n&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0) == SET)&#123;<br>vTaskDelay(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//while等待松手时加个延迟可以让任务三不会一直抢占线程</span><br><span class="hljs-keyword">while</span>(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0) == SET)vTaskDelay(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span>(task1_handler != <span class="hljs-literal">NULL</span>)&#123;<br>vTaskDelete(task1_handler);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;任务一删除成功！\r\n&quot;</span>);<br>task1_handler = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br>vTaskDelay(<span class="hljs-number">10</span>); <span class="hljs-comment">//按键检测要加个延迟，因为任务三优先级最高，不然任务三会一直霸占线程</span><br>&#125;<br>&#125;<br><span class="hljs-comment">/**************************************************************/</span><br></code></pre></td></tr></table></figure><h1 id="有FreeRTOS的问题可以评论私聊一起讨论一下噢"><a href="#有FreeRTOS的问题可以评论私聊一起讨论一下噢" class="headerlink" title="有FreeRTOS的问题可以评论私聊一起讨论一下噢"></a>有FreeRTOS的问题可以评论私聊一起讨论一下噢</h1>]]></content>
    
    
    <categories>
      
      <category>FreeRTOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ESP8266连接MQTT服务器</title>
    <link href="/2023/09/22/17-ESP8266%E8%BF%9E%E6%8E%A5MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/09/22/17-ESP8266%E8%BF%9E%E6%8E%A5MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ESP8266-01S的默认固件包并不支持相关的MQTT连接AT指令，因此需要烧录MQTT的相关固件包，才能通过AT指令连接到MQTT服务器</p><hr><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><ul><li>1、下载安信可固件包：<a href="https://docs.ai-thinker.com/%E5%9B%BA%E4%BB%B6%E6%B1%87%E6%80%BB">安信可AT固件汇总</a>（根据flash大小选择相应的MQTT透传AT固件，ESP8266-01S选择固件号<strong>1471</strong>，因为ESP8266-01S的flash只有1M，如果选择了<strong>1112</strong>的话是烧录不进去的，因为1112是4M的）</li><li>2、下载烧录工具和串口助手：<a href="https://docs.ai-thinker.com/tools">开发工具清单</a>（下载<strong>烧录WiFi固件工具：ESP_DOWNLOAD_TOOL</strong>和<strong>安信可串口调试助手</strong>）</li><li>3、CH340C固件下载烧录器（或者通过网上的相应上下拉操作相应引脚进入烧录模式，个人认为有烧录器更方便）</li><li>4、下载MQTTX：<a href="https://mqttx.app/zh">MQTTX官网</a>（主要用于连接成功后的消息测试，也可以用MQTTfx都可以）<h1 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h1><h2 id="1、测试ESP8266-01S"><a href="#1、测试ESP8266-01S" class="headerlink" title="1、测试ESP8266-01S"></a>1、测试ESP8266-01S</h2>将ESP8266-01S插在烧录器上，然后插上电脑，打开串口助手发送“AT”检查ESP8266-01S是否正常。<br><img src="https://img-blog.csdnimg.cn/24729163b03d4dc3aa25cbb3e9bd7e71.png#pic_center" alt="AT"><h2 id="2、烧录固件"><a href="#2、烧录固件" class="headerlink" title="2、烧录固件"></a>2、烧录固件</h2></li></ul><p>1、选择相应的bin文件，随便放在其中一行即可<br>2、spi速度选择40M，模式选择DIO<br>3、先按<strong>ERASE</strong>擦除程序<br>4、在按<strong>START</strong>开始烧录固件<br><img src="https://img-blog.csdnimg.cn/0c1e07caa6944749bbb44beaa387c0b8.png#pic_center" alt="在这里插入图片描述"><br>然后就下载完成啦<br><img src="https://img-blog.csdnimg.cn/6212672c4c264cb4838e29fc050cabb6.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3、连接MQTT服务器"><a href="#3、连接MQTT服务器" class="headerlink" title="3、连接MQTT服务器"></a>3、连接MQTT服务器</h2><p>这里我们使用EMQX提供的公用MQTT服务器作为测试，如果还没搭建MQTT服务器的就可以直接用来测试了<br>地址：<a href="https://www.emqx.com/zh/mqtt/public-mqtt5-broker">公用MQTT服务器</a><br><img src="https://img-blog.csdnimg.cn/58a6aa9ae1364141a2c70bc364952f5b.png#pic_center" alt="在这里插入图片描述"><br>接下来开始使用AT指令连接MQTT服务器！</p><h3 id="3-1、AT"><a href="#3-1、AT" class="headerlink" title="3.1、AT"></a>3.1、AT</h3><p>“OK”<br>测试ESP8266-01S是否正常工作</p><h3 id="3-2、AT-CWMODE-1"><a href="#3-2、AT-CWMODE-1" class="headerlink" title="3.2、AT+CWMODE=1"></a>3.2、AT+CWMODE=1</h3><p>“OK”<br>设置ESP8266-01S工作模式为Station模式（客户端模式）</p><h3 id="3-3、AT-CWJAP-”wifi-name”-”password”"><a href="#3-3、AT-CWJAP-”wifi-name”-”password”" class="headerlink" title="3.3、AT+CWJAP=”wifi-name”,”password”"></a>3.3、AT+CWJAP=”wifi-name”,”password”</h3><p>“OK”<br>连接WiFi，参数改成要连接的WiFi名称和密码</p><h3 id="3-4、AT-MQTTUSERCFG-0-1-”MQTT-ID”-”username”-”password”-0-0-””"><a href="#3-4、AT-MQTTUSERCFG-0-1-”MQTT-ID”-”username”-”password”-0-0-””" class="headerlink" title="3.4、AT+MQTTUSERCFG=0,1,”MQTT_ID”,”username”,”password”,0,0,””"></a>3.4、AT+MQTTUSERCFG=0,1,”MQTT_ID”,”username”,”password”,0,0,””</h3><p>“OK”</p><ul><li>0：索引号</li><li>1：客户端编号</li><li>“MQTT_ID”：MQTT客户端ID，可设置任意字符串</li><li>“username”: 表示 MQTT 服务器的用户名。（公用服务器不需要验证用户名密码，所有随便填）</li><li>“password”: 表示 MQTT 服务器的密码。（同上）</li><li>0: 是否使用预先配置的 TLS 连接</li><li>0: 是否清除会话</li><li>“”: 设置遗愿主题<h3 id="3-5、AT-MQTTCONN-0-”broker-cn-emqx-io”-1883-1"><a href="#3-5、AT-MQTTCONN-0-”broker-cn-emqx-io”-1883-1" class="headerlink" title="3.5、AT+MQTTCONN=0,”broker-cn.emqx.io”,1883,1"></a>3.5、AT+MQTTCONN=0,”broker-cn.emqx.io”,1883,1</h3></li></ul><p>“OK”</p><ul><li>0: 索引号</li><li>“broker-cn.emqx.io”: MQTT 服务器的地址（域名也是ip地址）。</li><li>1883:  MQTT 服务器的端口号</li><li>1: QoS等级（具体含义百度一下就知道了，QoS一共三个等级，代表三个通讯等级）<h3 id="3-6、AT-MQTTSUB-0-”Subscription-Topic”-0"><a href="#3-6、AT-MQTTSUB-0-”Subscription-Topic”-0" class="headerlink" title="3.6、AT+MQTTSUB=0,”Subscription_Topic”,0"></a>3.6、AT+MQTTSUB=0,”Subscription_Topic”,0</h3>“OK”</li><li>0: 索引号</li><li>“Subscription_Topic”: 要订阅的主题（因为使用的是公用服务器，所以有很多人再用，起主题名字时最好长一点特别一点，防止和别人重复，不然会收到别人的消息，到时候消息测试时不好测试，会有大堆乱七八糟的消息刷进来）</li><li>0: QoS等级<h3 id="3-7、AT-MQTTPUB-0-”Topic”-”message”-0-0"><a href="#3-7、AT-MQTTPUB-0-”Topic”-”message”-0-0" class="headerlink" title="3.7、AT+MQTTPUB=0,”Topic”,”message”,0,0"></a>3.7、AT+MQTTPUB=0,”Topic”,”message”,0,0</h3>“OK”</li><li>0:索引号</li><li>“Topic”: 要发布消息的主题</li><li>“message”: 要发布的消息内容</li><li>0: QoS等级</li><li>0: 是否保留消息</li></ul><hr><p>到以上为止，ESP8266-01S就成功连上MQTT服务器了，接下来通过MQTTX来检查一下能否正常收到ESP8266-01S发出的消息</p><h2 id="4、连接测试"><a href="#4、连接测试" class="headerlink" title="4、连接测试"></a>4、连接测试</h2><h3 id="4-1、建立连接"><a href="#4-1、建立连接" class="headerlink" title="4.1、建立连接"></a>4.1、建立连接</h3><p>打开MQTTX建立一个连接<img src="https://img-blog.csdnimg.cn/0a4069e77fc3451b84702ee3c306449c.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-2、订阅主题"><a href="#4-2、订阅主题" class="headerlink" title="4.2、订阅主题"></a>4.2、订阅主题</h3><p><strong>topic</strong>：主题名<br>然后就可以点击confirm<br><img src="https://img-blog.csdnimg.cn/04224fae3cef48d0a930944e185bf587.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-3、发送消息"><a href="#4-3、发送消息" class="headerlink" title="4.3、发送消息"></a>4.3、发送消息</h3><p>这时候在通过串口助手发送AT指令让ESP8266-01S发送一条消息到相应的主题即可，AT指令：<br>AT+MQTTPUB=0,”你的主题名称”,”message”,0,0<br>message是你要发的消息<br><img src="https://img-blog.csdnimg.cn/1af94c47a0944b14bba46b33acd7b9dd.png#pic_center" alt="在这里插入图片描述"><br>在MQTTX上就收到了ESP8266-01S发来的消息啦，说明ESP8266-01S连接MQTT服务器成功！！！</p><hr><p> <code>以上就是ESP8266-01S连接MQTT服务器的全部过程了，有什么问题欢迎评论私信相互讨论学习一下。</code></p>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>idf.py常用指令</title>
    <link href="/2023/09/18/16-idf.py%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/09/18/16-idf.py%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="idf-py常用指令"><a href="#idf-py常用指令" class="headerlink" title="idf.py常用指令"></a>idf.py常用指令</h1><hr><ul><li><p><em>idf.py help</em> ：将输出指令列表和使用说明</p></li><li><p>*idf.py set-target<target>*：设置编译咪表，<target>请替换为esp32s3等</p></li><li><p><em>idf.py menuconfig</em>：运行menuconfig终端图像化配置工具，可以选择或修改配置选项，配置结构将保存在sdkconfig文件</p></li><li><p><strong>idf.py build</strong>：开始编译代码，编译产生的中间文件和最终的可执行程序，将默认保存在项目build目录，编译过程是增量式的，如果仅对一个源文件进行修改，下次编译将只重新编译已修改的文件</p></li><li><p><em>idf.py fullclean</em>：删除整个build目录下的内容，包括所有CMake的配置输出文件。下次构建项目时，CMake会从头开始配置项目。请注意，该命令将会递归删除构建目录下的所有文件，请谨慎使用。但项目配置文件同样不会被删除。</p></li><li><p><strong>idf.py flash</strong>：将bulid生成的可执行程序二进制文件烧录进目标ESP32-C3设备中。*-p <port_name>* 和 <em>-b <baud_rate></em> 选项可分别设置串口的设备名和烧录时的波特率，如果不指定将自动搜索串口，并使用默认波特率</p></li><li><p><strong>idf.py monitor</strong>：用于显示目标ESP32-C3设备的串口输出。同样 -p 选项可用于设置主机端串口的设备名，串口打印期间，可按下组合键Ctrl-]退出监控器。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>ESP32</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux搭建MQTT服务器</title>
    <link href="/2023/09/14/15-Ubuntu%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/09/14/15-Ubuntu%E6%90%AD%E5%BB%BAMQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="在Ubuntu20-04搭建MQTT服务器EMQX"><a href="#在Ubuntu20-04搭建MQTT服务器EMQX" class="headerlink" title="在Ubuntu20.04搭建MQTT服务器EMQX"></a>在Ubuntu20.04搭建MQTT服务器EMQX</h1><p><strong>MQTT是一种协议，而EMQX是协议实现的消息中间件，是MQTT服务端</strong></p><hr><h2 id="使用MQTT-fx客户端测试TCP"><a href="#使用MQTT-fx客户端测试TCP" class="headerlink" title="使用MQTT.fx客户端测试TCP"></a>使用MQTT.fx客户端测试TCP</h2><p><a href="http://mqttfx.jensd.de/index.php">MQTT.fx</a>是一款基于<a href="https://so.csdn.net/so/search?q=Eclipse&spm=1001.2101.3001.7020">Eclipse</a> Paho，使用Java语言编写的MQTT客户端工具。支持通过Topic订阅和发布消息，用来前期和物理云平台调试非常方便。（点击<a href="http://mqttfx.jensd.de/index.php">MQTT.fx</a>即可跳转到官网）</p><h2 id="EMQX主题创建"><a href="#EMQX主题创建" class="headerlink" title="EMQX主题创建"></a>EMQX主题创建</h2><p>EMQX主题可以通过控制台创建，也可通过客户端订阅创建，当客户端订阅一个<strong>Subscribe（订阅）</strong>一个<strong>Topic（主题）</strong>时，如果这个Topic不存在，则EMQX服务端就会创建一个这样的Topic，如果一上来不订阅直接向某个Topic发布消息时，而EMQX服务端此时又没有一个Client Subscribe过这个Topic，原来也没有创建过这个Topic，则会被当成垃圾消息直接丢弃。</p>]]></content>
    
    
    <categories>
      
      <category>MQTT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Xshell连接Linux</title>
    <link href="/2023/09/12/14-Xshell%E8%BF%9E%E6%8E%A5Linux/"/>
    <url>/2023/09/12/14-Xshell%E8%BF%9E%E6%8E%A5Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="在window-10运行Xshell-7连接linux（Ubuntu版本）"><a href="#在window-10运行Xshell-7连接linux（Ubuntu版本）" class="headerlink" title="在window 10运行Xshell 7连接linux（Ubuntu版本）"></a>在window 10运行Xshell 7连接linux（Ubuntu版本）</h1><p><strong>首先要明白在是在window上连接linux，因此window是客户端，linux是服务端，所以在window上需要开启ssh服务，在linux上需要开启sshd服务！！！！</strong></p><hr><h2 id="–1、Window上需要做的准备"><a href="#–1、Window上需要做的准备" class="headerlink" title="–1、Window上需要做的准备"></a>–1、Window上需要做的准备</h2><h3 id="1-1、检查window上是否开启ssh服务"><a href="#1-1、检查window上是否开启ssh服务" class="headerlink" title="1.1、检查window上是否开启ssh服务"></a>1.1、检查window上是否开启ssh服务</h3><p>按住ALT+R输入cmd进行window的命令行，或者通过搜索行搜索网络提示符（用管理员身份打开！），输入以下指令开启sshd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net start sshd<br></code></pre></td></tr></table></figure><p>如果没有显示服务正在启动或者是服务已经启动成功，可能是因为系统没有安装OpenSSH 服务器，需要在window电脑设置中找到<strong>应用与功能</strong>-&gt;<strong>可选功能</strong>-&gt;<strong>添加功能</strong>-&gt;中搜索”OpenSSH 服务器“进行安装（最好把”OpenSSH 客户端“也给安装了），然后重新运行上面命令启动sshd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">net stop sshd(也可以通过这个命令暂停sshd服务)<br></code></pre></td></tr></table></figure><h2 id="–2、Linux上需要做的准备"><a href="#–2、Linux上需要做的准备" class="headerlink" title="–2、Linux上需要做的准备"></a>–2、Linux上需要做的准备</h2><h3 id="2-1、安装sshd"><a href="#2-1、安装sshd" class="headerlink" title="2.1、安装sshd"></a>2.1、安装sshd</h3><p>通过指令进行安装ssh服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure><h3 id="2-2、开启sshd服务"><a href="#2-2、开启sshd服务" class="headerlink" title="2.2、开启sshd服务"></a>2.2、开启sshd服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /etc/init.d/ssh start<br></code></pre></td></tr></table></figure><p>打印Starting ssh说明开启成功</p><h3 id="2-3、检查sshd服务状态"><a href="#2-3、检查sshd服务状态" class="headerlink" title="2.3、检查sshd服务状态"></a>2.3、检查sshd服务状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -e | gerp ssh<br></code></pre></td></tr></table></figure><p>有打印：6534 ？ 00：00：00 sshd则说明sshd运行正常</p><h2 id="–3、Xshell连接Linux"><a href="#–3、Xshell连接Linux" class="headerlink" title="–3、Xshell连接Linux"></a>–3、Xshell连接Linux</h2><h3 id="3-1、新建连接"><a href="#3-1、新建连接" class="headerlink" title="3.1、新建连接"></a>3.1、新建连接</h3><p>首先打开<strong>文件</strong>-&gt;<strong>新建连接</strong></p><p><a href="https://imgse.com/i/pP2myhd"><img src="https://s1.ax1x.com/2023/09/12/pP2myhd.png" alt="pP2myhd.png"></a></p><p><img src="https://pic.imgdb.cn/item/650058c2661c6c8e54015787.png"> </p><p>虚拟机IP可通过终端命令ifconfig查看</p><p><img src="https://pic.imgdb.cn/item/65006998661c6c8e540b05c0.png"></p><h3 id="3-2、用户身份验证"><a href="#3-2、用户身份验证" class="headerlink" title="3.2、用户身份验证"></a>3.2、用户身份验证</h3><p>输入普通用户名以及密码，此处不能使用root超级用户</p><p><img src="https://pic.imgdb.cn/item/650069af661c6c8e540b0a22.png"></p><p>还可以在<strong>外观</strong>选项中修改一下字体大小，建议改成<strong>12</strong></p><h3 id="3-3、连接"><a href="#3-3、连接" class="headerlink" title="3.3、连接"></a>3.3、连接</h3><p>点击连接即可连接到linux服务器，就可以正常使用命令行了，如出现连接失败的情况可以检查电脑和Linux是否都正常打开了相应ssh服务</p><p><img src="https://pic.imgdb.cn/item/6500719f661c6c8e54107b93.png"></p><hr><p>关于Xshell连接Linux出现连接失败（connection failed）的问题，参考以下文章：</p><p>[解决Xshell7远程连接失败（connection failed）的问题_xshell connection failed_不是桐阿姨的博客-CSDN博客](<a href="https://blog.csdn.net/m0_52452585/article/details/123766668#:~:text=%E6%88%91%E8%AF%95%E5%9B%BE%E5%88%A9%E7%94%A8Xshell%EF%BC%8C%E5%9C%A8windows%E4%B8%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BALinux%EF%BC%8C%E4%BD%86%E6%98%AF%E6%8C%89%E7%85%A7%E6%95%99%E7%A8%8B%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%B5%B0%E4%B8%8B%E6%9D%A5%EF%BC%8C%E6%8A%A5%E4%BA%86%E5%A6%82%E4%B8%8B%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%EF%BC%9A">https://blog.csdn.net/m0_52452585/article/details/123766668#:~:text=我试图利用Xshell，在windows上远程连接虚拟机Linux，但是按照教程一步步走下来，报了如下一个错误：</a> 原因 windows没有打开ssh，Linux系统没有打开sshd（只打开了ssh）,所以有问题的朋友可以先检查一下这两个功能是否打开 windows一开始是ssh和sshd都没有打开的，这个一定要去看看 如果都打开了的话，可以去看看其他可能的问题，这里指路：http%3A%2F%2Ft.csdn.cn%2FdiwT3)</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>原理图导入PCB常见错误</title>
    <link href="/2023/08/01/13-%E5%8E%9F%E7%90%86%E5%9B%BE%E5%AF%BCPCB%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <url>/2023/08/01/13-%E5%8E%9F%E7%90%86%E5%9B%BE%E5%AF%BCPCB%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1、元器件引脚与封装引脚不同"><a href="#1、元器件引脚与封装引脚不同" class="headerlink" title="1、元器件引脚与封装引脚不同"></a>1、元器件引脚与封装引脚不同</h2><blockquote><p>假设画元器件原理图时，引脚号为1，而在画元器件封装时，没有将封装的引脚号改成1，则会在导入PCB时出现Unknow的错误</p></blockquote><h2 id="2、元器件的位号问题"><a href="#2、元器件的位号问题" class="headerlink" title="2、元器件的位号问题"></a>2、元器件的位号问题</h2><blockquote><p>元器件位号Designator可以隐藏，但是不能填错，要正确填写好每个引脚的位号，特别是排插端口多引脚的情况，在画原理图时要留意每个引脚的位号，确保封装的位号和原理图中的位号一致，问题与上面差不多一致，不然也会出现Unknown的情况</p></blockquote><h2 id="3、PCB出现绿色报错"><a href="#3、PCB出现绿色报错" class="headerlink" title="3、PCB出现绿色报错"></a>3、PCB出现绿色报错</h2><blockquote><p>第一次从原理图导入PCB焊盘出现绿色报错并且显示&lt;10mil可能是因为规则要求焊盘之间的间距要大于10mil，可以通过Design（设计）-&gt; Rules（规则）-&gt; Design Rules -&gt; Electrical -&gt; Clearance -&gt; Clearance中修改焊盘最小间距，可以修改为6mil，或者直接在“忽略同一封装内的焊盘间距”选项上打勾</p></blockquote><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>画元器件原理图时，要注意位号Designator与封装一致，名字Name可以随意</p></li><li><p>画元器件封装时，要注意修改焊盘位号，与原理图位号保持一致</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>AD</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>结构体</title>
    <link href="/2023/07/13/12-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2023/07/13/12-%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h2 id="结构体的三种声明方式"><a href="#结构体的三种声明方式" class="headerlink" title="结构体的三种声明方式"></a>结构体的三种声明方式</h2><h3 id="声明方式一"><a href="#声明方式一" class="headerlink" title="声明方式一"></a>声明方式一</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">p</span>;</span><br></code></pre></td></tr></table></figure><h3 id="声明方式二"><a href="#声明方式二" class="headerlink" title="声明方式二"></a>声明方式二</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;p;<br></code></pre></td></tr></table></figure><p>此时p即为结构体变量，且后期无法通过结构体在创建其他变量，此声明方式很少使用</p><h3 id="声明方式三"><a href="#声明方式三" class="headerlink" title="声明方式三"></a>声明方式三</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;p;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">p1</span>;</span><br></code></pre></td></tr></table></figure><h2 id="使用typedef修改结构体声明"><a href="#使用typedef修改结构体声明" class="headerlink" title="使用typedef修改结构体声明"></a>使用typedef修改结构体声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">POINT</span>&#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;point;<br><br>point p;<br><br><span class="hljs-comment">//typedef</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> INT;<br>INT i = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>typedef可以修改声明数据类型名称，使结构体定义变量更加方便</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言字符串数组</title>
    <link href="/2023/07/10/11-C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/"/>
    <url>/2023/07/10/11-C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是字符串？"><a href="#什么是字符串？" class="headerlink" title="什么是字符串？"></a>什么是字符串？</h2><p>在C语言中没有直接的字符串数据类型，因此只能通过字符数组来代替字符串，通过以下定义可以初始化一个字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> p[] = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof = %d&quot;</span>, <span class="hljs-keyword">sizeof</span>(p)); <span class="hljs-comment">// 6</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof = %d&quot;</span>, <span class="hljs-built_in">strlen</span>(p)); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>字符数组的最后一位默认是’\0’，因此通过sizeof获取的数组长度为6，而strlen没有计算包括’\0’在内的长度，因此为5</p><hr><h2 id="怎么打印字符串？"><a href="#怎么打印字符串？" class="headerlink" title="怎么打印字符串？"></a>怎么打印字符串？</h2><p>通过printf(“%s”, p)即可打印出字符串，只需要传入字符串的首地址，直到遇到’\0’时打印结束</p><hr><h2 id="通过char-p-创建字符串数组"><a href="#通过char-p-创建字符串数组" class="headerlink" title="通过char *p[] 创建字符串数组"></a>通过char *p[] 创建字符串数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *p[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> a[] = &#123;<span class="hljs-string">&quot;hello world&quot;</span>&#125;;<br>p[<span class="hljs-number">0</span>] = a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, p[<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以打印出字符串”hello world”了，*p[10]其实是一个一维字符指针数组，p[0]存放的是char类型的一个一维数组地址。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>异常处理方式</title>
    <link href="/2023/06/25/10-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/06/25/10-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>51单片机内部时钟</title>
    <link href="/2023/06/14/09-51%E5%8D%95%E7%89%87%E6%9C%BA%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F/"/>
    <url>/2023/06/14/09-51%E5%8D%95%E7%89%87%E6%9C%BA%E5%86%85%E9%83%A8%E6%97%B6%E9%92%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1T模式和12T模式"><a href="#1T模式和12T模式" class="headerlink" title="1T模式和12T模式"></a>1T模式和12T模式</h2><p>1T 模式 (不分频) —— 1个系统基本时钟，执行一个动作；（速度更快）<br>12T模式(12分频) —— 12个系统基本时钟，执行一个动作；</p><p>即对定时器的时钟进行操作，假设单片机内部时钟为12M，使用12T模式则定时器时钟变为1M</p><p>定时器的两种计数速率：12T模式：每12个时钟计数器加1</p><p>​                                            1T模式：每1个时钟计数器加1</p><h3 id="AUXR：辅助寄存器"><a href="#AUXR：辅助寄存器" class="headerlink" title="AUXR：辅助寄存器"></a>AUXR：辅助寄存器</h3><p><img src="https://img-blog.csdnimg.cn/20210221143811660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JvY2hlcl8yMg==,size_16,color_FFFFFF,t_70"></p><p>用于配置定时器的分频系数</p><p>12T —— 8051定时器速度，12分频，输出频率=SYSclk / (65536 - T0) / 2<br>1T —— 8051定时器速度的12倍，不分频，输出频率=SYSclk / 12 / (65536 - T0) / 2</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FPGA开发软件安装</title>
    <link href="/2023/06/13/08-FPAG%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/13/08-FPAG%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h1><ol><li><p>Quartus II开发软件（13.0）</p></li><li><p>ModelSim仿真软件</p></li><li><p>Visio绘图软件</p></li><li><p>NotePad++代码编译器</p><p>百度网盘（所有软件安装包）：<a href="https://pan.baidu.com/s/1BMuxHKfc0l6WIMvvEEyU1w">https://pan.baidu.com/s/1BMuxHKfc0l6WIMvvEEyU1w</a><br>提取码：us8r</p></li></ol><h2 id="1、Quartus-II"><a href="#1、Quartus-II" class="headerlink" title="1、Quartus II"></a>1、Quartus II</h2><blockquote><p>官网地址：<a href="https://www.intel.com/content/www/us/en/collections/products/fpga/software/downloads.html?p=11">FPGA Software Download Center (intel.com)</a></p><p>建议选择13.版本</p><p><img src="C:\Users\hasee\AppData\Roaming\Typora\typora-user-images\image-20230612101424887.png" alt="image-20230612101424887"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>匿名类</title>
    <link href="/2023/04/29/07-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2023/04/29/07-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h1><h2 id="1、匿名子类"><a href="#1、匿名子类" class="headerlink" title="1、匿名子类"></a>1、匿名子类</h2><ul><li>提供一个匿名子类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//方法一</span><br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123;&#125;;<span class="hljs-comment">//中括号代表继承C的子类</span><br>c.method();<span class="hljs-comment">//调用的是父类中的method方法</span><br><br><span class="hljs-comment">//方法二：对象都一起匿名</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123;&#125;.method();<span class="hljs-comment">//匿名对象的匿名子类</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="2、匿名继承抽象类的子类"><a href="#2、匿名继承抽象类的子类" class="headerlink" title="2、匿名继承抽象类的子类"></a>2、匿名继承抽象类的子类</h2><ul><li>提供一个匿名继承抽象类的子类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//方法一</span><br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//对抽象类C的method方法进行重写</span><br>System.out.println(<span class="hljs-string">&quot;Sub C&quot;</span>);<br>&#125;<br>&#125;;<span class="hljs-comment">//中括号代表抽象类C的子类</span><br>c.method();<span class="hljs-comment">//调用的是匿名子类重写的method方法</span><br><br><span class="hljs-comment">//方法二：对象都一起匿名</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <span class="hljs-comment">//匿名对象的匿名子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <br>System.out.println(<span class="hljs-string">&quot;Sub C&quot;</span>);<br>&#125;<br>&#125;.method();<span class="hljs-comment">//在这里调用重写的method方法</span><br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="3、接口的匿名实现类"><a href="#3、接口的匿名实现类" class="headerlink" title="3、接口的匿名实现类"></a>3、接口的匿名实现类</h2><ul><li>提供一个接口的匿名实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//方法一</span><br><span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//对接口C的method方法进行重写</span><br>System.out.println(<span class="hljs-string">&quot;匿名实现类重写的方法method()&quot;</span>);<br>&#125;<br>&#125;;<br>c.method();<span class="hljs-comment">//调用的是匿名类重写的method方法</span><br><br><span class="hljs-comment">//方法二：提供接口匿名实现类的匿名对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>()&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123; <br>System.out.println(<span class="hljs-string">&quot;匿名实现类重写的方法method()&quot;</span>);<br>&#125;<br>&#125;.method();<span class="hljs-comment">//在这里调用重写的method方法</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中的高阶关键字</title>
    <link href="/2023/04/26/06-Java%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2023/04/26/06-Java%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Java中的高阶关键字"><a href="#Java中的高阶关键字" class="headerlink" title="Java中的高阶关键字"></a>Java中的高阶关键字</h1><ul><li><strong>1、static（静态）</strong></li><li><strong>2、extends（继承）</strong></li><li><strong>3、final（锁定）</strong></li><li><strong>4、abstract（抽象）</strong></li><li><strong>5、interface（接口）</strong></li><li><strong>6、implements（实现）</strong></li></ul><h2 id="1、static（静态）"><a href="#1、static（静态）" class="headerlink" title="1、static（静态）"></a>1、static（静态）</h2><blockquote><ul><li><p>修饰<strong>成员变量</strong>：声明成员变量为静态成员变量，即所有类共享该成员变量</p></li><li><p>修饰<strong>方法</strong>：声明方法为静态方法，即所有类共享该方法（静态方法中不能调用非静态成员）</p></li></ul><p>static修饰的属性和方法会在方法加载时一起加载，即不需要实例化也可以调用静态属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Chinese&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">nation</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;中国&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(nation);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(Chinese.nation);<span class="hljs-comment">//中国</span><br>    Chinese.Test();<span class="hljs-comment">//中国</span><br><span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>();<br><span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>();<br>System.out.println(c1.nation);<span class="hljs-comment">//中国</span><br>System.out.println(c2.nation);<span class="hljs-comment">//中国</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="2、extends（继承）"><a href="#2、extends（继承）" class="headerlink" title="2、extends（继承）"></a>2、extends（继承）</h2><blockquote><p>用于类与类的继承，假设A继承于SuperA，则拥有SuperA的属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperA</span>&#123;<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SuperA</span>&#123;&#125;<span class="hljs-comment">//A继承SuperA</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>System.out.println(a.b);<br>a.Test();<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="3、final（锁定）"><a href="#3、final（锁定）" class="headerlink" title="3、final（锁定）"></a>3、final（锁定）</h2><blockquote><ul><li>修饰<strong>类</strong>：表示此类无法被继承</li><li>修饰<strong>方法</strong>：表示该方法无法被重写</li><li>修饰<strong>变量</strong>：将变量变成常量，修饰后无法在赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<span class="hljs-comment">//Error：类A不能被继承</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-comment">//Error：该方法不能重写</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="4、abstract（抽象）"><a href="#4、abstract（抽象）" class="headerlink" title="4、abstract（抽象）"></a>4、abstract（抽象）</h2><blockquote><ul><li><p>修饰<strong>类</strong>：声明此类为抽象类</p><blockquote><ol><li>抽象类不能<em><strong>实例化</strong></em></li><li>抽象类中是包含构造器的</li><li>抽象类中可以没有抽象方法，反之抽象方法所在的类，一定是抽象类</li></ol></blockquote></li><li><p>修饰<strong>方法</strong>：声明此方法为抽象方法</p><blockquote><ol><li>抽象方法只有方法的声明，没有方法体（不写大括号）</li><li>抽象方法的功能是确定的</li><li>子类必须重写父类的所有抽象方法之后，方可实例化</li></ol></blockquote></li></ul><p>abstract不能修饰：<em>属性、构造器、代码块</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;&#125;;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="5、interface（接口）"><a href="#5、interface（接口）" class="headerlink" title="5、interface（接口）"></a>5、interface（接口）</h2><blockquote><ul><li>修饰<strong>类</strong>：声明类为接口类（实现该接口的类称为实现类）</li></ul><blockquote><ul><li>类可以实现多个接口</li><li>类针对接口的多实现，一定程度上弥补了单继承的局限性</li><li>类必须将实现的接口中额所有抽象方法都重写（或实现），方可实例化，否则此实现类必须声明为抽象类</li><li>接口类没有构造器</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span>&#123;<br><span class="hljs-comment">//属性public static final可以省略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_SPEED</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//方法public abstract可以省略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="6、implements（实现）"><a href="#6、implements（实现）" class="headerlink" title="6、implements（实现）"></a>6、implements（实现）</h2><blockquote><p>用于表示类对接口的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<span class="hljs-comment">//A类对上面的USB接口进行实现</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-comment">//必须重写start()</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>方法的重载和重写</title>
    <link href="/2023/04/18/05-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/"/>
    <url>/2023/04/18/05-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="方法的重载和重写"><a href="#方法的重载和重写" class="headerlink" title="方法的重载和重写"></a>方法的重载和重写</h1><h2 id="重载（overload）"><a href="#重载（overload）" class="headerlink" title="重载（overload）"></a>重载（overload）</h2><blockquote><p>对方法的重载遵循“<strong>两同一不同</strong>“原则，即：</p><p>——同一个类，同一个方法</p><p>——不同参数（只有形参名称不同不构成重载）</p><p>使得再调用方法时会根据参数不同自动选择相应的方法，例如一个add方法的重载：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 对add方法进行重载</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span>&#123;<br><span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">double</span> k = <span class="hljs-number">1.1</span>;p = <span class="hljs-number">2.2</span>;<br><span class="hljs-keyword">add</span>(i,j);<br><span class="hljs-keyword">add</span>(k,p);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j</span>)</span>&#123;<br><span class="hljs-keyword">return</span> i+j;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> i,<span class="hljs-built_in">double</span> j</span>)</span>&#123;<br><span class="hljs-keyword">return</span> i+j;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="重写（override）"><a href="#重写（override）" class="headerlink" title="重写（override）"></a>重写（override）</h2><blockquote><p>子类对父类方法进行重写，覆盖父类的方法，重写方法遵循：</p><p>与父类方法名相同、参数相同、返回值类型相同，只改变方法的实现，例如student对person的study方法进行重写：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>public void study()&#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;老师学习&quot;</span>)<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-comment">//对父类Person的study进行重写,Override是标记而已</span><br><span class="hljs-meta">@Override</span><br>public void study()&#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;学生学习&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python调用chatGPT接口</title>
    <link href="/2023/04/17/04-Python%E8%B0%83%E7%94%A8chatGPT/"/>
    <url>/2023/04/17/04-Python%E8%B0%83%E7%94%A8chatGPT/</url>
    
    <content type="html"><![CDATA[<h2 id="调用Completion实现"><a href="#调用Completion实现" class="headerlink" title="调用Completion实现"></a>调用Completion实现</h2><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><p><img src="https://i.postimg.cc/FRwL7YD6/2023-04-17-143517.png" alt="2023-04-17-143517.png"></p><p>出现以下错误时：</p><blockquote><p>openai.error.APIConnectionError: Error communicating with OpenAI: HTTPSConnectionPool(host=’<a href="https://link.zhihu.com/?target=http://api.openai.com/">api.openai.com</a>‘, port=443): Max retries exceeded with url: /v1/engines/text-davinci-003/completions (Caused by NewConnectionError(‘&lt;urllib3.connection.HTTPSConnection object at 0x000001F13B451100&gt;: Failed to establish a new connection: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。’))</p></blockquote><p>可以尝试以下解决方法</p><h3 id="1、降低urllib3版本到1-25-11"><a href="#1、降低urllib3版本到1-25-11" class="headerlink" title="1、降低urllib3版本到1.25.11"></a>1、降低urllib3版本到1.25.11</h3><blockquote><p>通过使用pip list查看urllib3版本</p><p><img src="https://i.postimg.cc/W1DJST1c/2023-04-17-133525.png" alt="2023-04-17-133525" title="查看urllib3版本"></p><p>在使用以下指令降低urllib3版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install urllib3==1.25.11<br></code></pre></td></tr></table></figure></blockquote><h3 id="2、开启魔法上网"><a href="#2、开启魔法上网" class="headerlink" title="2、开启魔法上网"></a>2、开启魔法上网</h3><blockquote><p>调用API接口之前记得开启代理服务器，才能正常获取返回的数据</p></blockquote><hr><h2 id="调用ChatCompletion实现上下文对话"><a href="#调用ChatCompletion实现上下文对话" class="headerlink" title="调用ChatCompletion实现上下文对话"></a>调用ChatCompletion实现上下文对话</h2><h3 id="1、确保openai版本为0-27-0以上"><a href="#1、确保openai版本为0-27-0以上" class="headerlink" title="1、确保openai版本为0.27.0以上"></a>1、确保openai版本为0.27.0以上</h3><blockquote><p>可以通过<em>pip list</em>查看安装的openai库的版本<img src="https://i.postimg.cc/TPczZBR2/2023-04-17-171923.png" alt="2023-04-17-171923.png" title="查看版本"></p><p>当发现版本为0.8.0时需要进行升级，通过pip3 install –upgrade openai自动安装不稳定（因为我一直失败），所以建议手动安装：</p><blockquote><p>通过:<a href="https://pypi.org/project/openai/#files%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84openai%E5%BA%93">https://pypi.org/project/openai/#files下载最新版本的openai库</a></p><p>在通过：pip3 install openai-0.27.4-py3-none-any.whl 进行安装（后面这个文件名不一定一样，要根据你下载的文件进行安装）</p></blockquote><p>当安装时出现<img src="https://i.postimg.cc/XNwn815J/2023-04-17-172353.png" alt="2023-04-17-172353.png"></p><p>表示你的python版本过低，需要升级至3.7.1以上</p></blockquote><h3 id="2、安装最新版的Anaconda"><a href="#2、安装最新版的Anaconda" class="headerlink" title="2、安装最新版的Anaconda"></a>2、安装最新版的Anaconda</h3><blockquote><p>安装最新版的Anaconda通过<em>pip install openai</em>指令即可安装最新版的openai（0.27.0）版本</p></blockquote><p>最终实现效果:<img src="https://i.postimg.cc/vTr7QgcL/2023-04-17-200837.png" alt="2023-04-17-200837.png"></p><h3 id="源码：-1"><a href="#源码：-1" class="headerlink" title="源码："></a>源码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">import</span> os<br><br>OPENAI_API_KEY=<span class="hljs-string">&quot;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&quot;</span><br>openai.api_key = os.getenv(<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>,OPENAI_API_KEY)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,conversation_list=[]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># self.conversation_list = [&#123;&#x27;role&#x27;:&#x27;system&#x27;,&#x27;content&#x27;:&#x27;你是一个非常友善的助手&#x27;&#125;]</span><br>        self.conversation_list = []<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_conversation</span>(<span class="hljs-params">self,msg_list</span>):<br>        <span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> msg_list:<br>            <span class="hljs-keyword">if</span> msg[<span class="hljs-string">&#x27;role&#x27;</span>] == <span class="hljs-string">&#x27;user&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47b: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">self,prompt</span>):<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:prompt&#125;)<br>        response = openai.ChatCompletion.create(model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,messages=self.conversation_list)<br>        answer = response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&#x27;content&#x27;</span>]<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;assistant&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:answer&#125;)<br>        <span class="hljs-comment">#self.show_conversation(self.conversation_list)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;self.conversation_list[-<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>) <br>        <span class="hljs-comment">#print(self.conversation_list)</span><br><br>c = Chat()<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    problem = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\U0001f47b：&quot;</span>)<br>    c.ask(problem)<br></code></pre></td></tr></table></figure><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><h3 id="1、token长度不能超过4096"><a href="#1、token长度不能超过4096" class="headerlink" title="1、token长度不能超过4096"></a>1、token长度不能超过4096</h3><p>会出现以下报错：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">InvalidRequestError: This model&#x27;s maximum <span class="hljs-built_in">context</span> <span class="hljs-built_in">length</span> <span class="hljs-built_in">is</span> <span class="hljs-number">4097</span> <span class="hljs-built_in">tokens</span>. However, your messages resulted <span class="hljs-keyword">in</span> <span class="hljs-number">4114</span> <span class="hljs-built_in">tokens</span>. Please reduce the <span class="hljs-built_in">length</span> of the messages.<br></code></pre></td></tr></table></figure><blockquote><p>在调用ChatCompletion实现上下文时，我们需要将之前的数据记录在字典中，在发送问题时同时将该字典一起发送才能实现上下文，但这样会导致消息越来越多，字典越来越长，产生的token也就越来越长，当出现token超过4096时在继续发送请求会出现的错误，因此需要注意控制token的长度。当token过长时可以通过去掉最前面的消息记录来减少，或者通过官网付费购买tokne解决。</p></blockquote><p>解决方法参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@name:Chen JiaWei</span><br><span class="hljs-string">@date:2023/04/18</span><br><span class="hljs-string">@version:2.0</span><br><span class="hljs-string">    解决token过长问题：当token的长度超过token_maxLen时列表除索引0外全部向前移动两位，覆盖最前面的消息记录，同时删除最后两个字典</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">import</span> os<br><br>OPENAI_API_KEY=<span class="hljs-string">&quot;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&quot;</span><br>openai.api_key = os.getenv(<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>,OPENAI_API_KEY)<br><br>token_maxLen = <span class="hljs-number">3400</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,conversation_list=[]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.conversation_list = [&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&#x27;你是一个资深的股票分析师&#x27;</span>&#125;]<br>        <span class="hljs-comment">#self.conversation_list = []</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_conversation</span>(<span class="hljs-params">self,msg_list</span>):<br>        <span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> msg_list:<br>            <span class="hljs-keyword">if</span> msg[<span class="hljs-string">&#x27;role&#x27;</span>] == <span class="hljs-string">&#x27;user&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47b: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;msg[<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">self,prompt</span>):<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:prompt&#125;)<br>        response = openai.ChatCompletion.create(model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,messages=self.conversation_list)<br>        token_light = response.get(<span class="hljs-string">&quot;usage&quot;</span>)[<span class="hljs-string">&quot;total_tokens&quot;</span>] <span class="hljs-comment"># token长度</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;token长度：<span class="hljs-subst">&#123;token_light&#125;</span>&quot;</span>)<br>        answer = response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&#x27;content&#x27;</span>]<br>        self.conversation_list.append(&#123;<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;assistant&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:answer&#125;)<br>        <span class="hljs-comment">#self.show_conversation(self.conversation_list)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\U0001f47D: <span class="hljs-subst">&#123;self.conversation_list[-<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span>) <br>        <br>        <span class="hljs-comment"># 当token大于3200时将整体记录往前移，覆盖最早的消息记录</span><br>        <span class="hljs-keyword">if</span> token_light &gt; token_maxLen:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(self.conversation_list)-<span class="hljs-number">2</span>):<br>                self.conversation_list[i] = self.conversation_list[i+<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">del</span> self.conversation_list[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">del</span> self.conversation_list[-<span class="hljs-number">1</span>]<br><br>c = Chat()<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    problem = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\U0001f47b：&quot;</span>)<br>    c.ask(problem)<br></code></pre></td></tr></table></figure><h3 id="2、1min内访问次数不能太多"><a href="#2、1min内访问次数不能太多" class="headerlink" title="2、1min内访问次数不能太多"></a>2、1min内访问次数不能太多</h3><p>会出现以下报错：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">RateLimitError: Rate limit reached <span class="hljs-keyword">for</span> <span class="hljs-keyword">default</span>-gpt-<span class="hljs-number">3.5</span>-turbo <span class="hljs-keyword">in</span> organization org-RWIdW4eeUKB8VeTMHou6l2la <span class="hljs-keyword">on</span> requests per min. Limit: <span class="hljs-number">3</span> / min. Please <span class="hljs-keyword">try</span> again <span class="hljs-keyword">in</span> <span class="hljs-number">20</span>s. Contact support@openai.com <span class="hljs-keyword">if</span> you <span class="hljs-keyword">continue</span> <span class="hljs-keyword">to</span> have issues. Please <span class="hljs-keyword">add</span> a payment <span class="hljs-keyword">method</span> <span class="hljs-title function_">to</span> <span class="hljs-title function_">your</span> <span class="hljs-title function_">account</span> <span class="hljs-title function_">to</span> <span class="hljs-title function_">increase</span> <span class="hljs-title function_">your</span> <span class="hljs-title function_">rate</span> <span class="hljs-title function_">limit</span>. <span class="hljs-title function_">Visit</span> <span class="hljs-title function_">https</span>:<span class="hljs-comment">//platform.openai.com/account/billing to add a payment method.</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Python类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenAI注册获取ChatGPT的API密钥</title>
    <link href="/2023/04/16/03-chatGPT%E6%B3%A8%E5%86%8C%E8%8E%B7%E5%8F%96Key/"/>
    <url>/2023/04/16/03-chatGPT%E6%B3%A8%E5%86%8C%E8%8E%B7%E5%8F%96Key/</url>
    
    <content type="html"><![CDATA[<ol><li>魔法上网</li><li>注册Google邮箱</li><li>接码平台接码</li></ol><h2 id="1、魔法上网"><a href="#1、魔法上网" class="headerlink" title="1、魔法上网"></a>1、魔法上网</h2><blockquote><p>2023年最新告诉稳定科学上网机场推荐</p><blockquote><p><em>桔子云</em> ：[点击直达桔子云官网](<a href="https://juzi27.com/user">首页 — 桔子云 (juzi27.com)</a>)</p><p><em>机场巴巴</em> ：[点击直达机场巴巴官网](<a href="https://www.ckcloud.cc/#/register?code=DS5DLTxi">JCBB (ckcloud.cc)</a>)</p><p><em>XRelay</em> ：[点击直达XRelay官网](<a href="https://isseys.net/#/register?code=LIE3Pyo2">xrelay (isseys.net)</a>)</p><p>推荐使用<strong>机场巴巴</strong>：新用户注册可免费试用一天，window建议使用V2Ray，按照官网教程操作即可成功访问外网</p></blockquote></blockquote><hr><h2 id="2、注册Google邮箱"><a href="#2、注册Google邮箱" class="headerlink" title="2、注册Google邮箱"></a>2、注册Google邮箱</h2><blockquote><p>为什么不使用QQ邮箱呢？</p><blockquote><p>因为目前ChatGPT大流行，OpenAi官网对部分邮箱进行了限制，当你使用QQ邮箱注册时会提示你【**Signup is currently unavailable, please try again later.**】，因此我们需要注册一个Google邮箱来注册OpenAi官网账号</p></blockquote></blockquote><h3 id="2-1、进入谷歌邮箱界面"><a href="#2-1、进入谷歌邮箱界面" class="headerlink" title="2.1、进入谷歌邮箱界面"></a>2.1、进入谷歌邮箱界面</h3><p>网址：<a href="https://mail.google.com/">https://mail.google.com</a></p><h3 id="2-2、按照提示正常注册即可"><a href="#2-2、按照提示正常注册即可" class="headerlink" title="2.2、按照提示正常注册即可"></a>2.2、按照提示正常注册即可</h3><p>谷歌邮箱可以使用国内的手机进行注册，当出现异常时，可以通过变换当前节点，重启电脑，或者清除浏览器数据（建议使用谷歌浏览器）</p><hr><h2 id="3、接码平台接码"><a href="#3、接码平台接码" class="headerlink" title="3、接码平台接码"></a>3、接码平台接码</h2><blockquote><p>为什么不使用SMS接码平台接码？</p><blockquote><p>因为里面的手机号已经被接烂了，大部分的手机号都已经被使用过了，在2023年2月份或许还能通过SMS接码注册，但在3、4月份已经很少还有手机号可以用于注册，会出现接收不到验证码的情况，并且最低充值2USD，差不多14RMB，因此不建议使用SMS接码</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java数组内存解析</title>
    <link href="/2023/04/06/02-Java%E6%95%B0%E7%BB%84%E5%A0%86%E5%92%8C%E6%A0%88/"/>
    <url>/2023/04/06/02-Java%E6%95%B0%E7%BB%84%E5%A0%86%E5%92%8C%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>堆</strong>：用于存放数组中的元素<br><strong>栈</strong>：用于存放方法中产生的局部变量</p></blockquote><hr><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>arr数组变量存放在属于main的<strong>栈</strong>中，而数组元素{1，2，3}则存放在<strong>堆</strong>中</p><p>arr数字的值只是数组元素在<strong>堆</strong>中的第一个元素的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = arr;<br></code></pre></td></tr></table></figure><p>该操作只是将arr的值给到arr1而已，并未通过new在堆中重新开辟新空间</p><hr><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>1）外部元素，默认存储的内部一维数组地址值</p><p>2）内部元素，默认与一维数组元素类型不同的默认值规定一致</p><p><strong>即arr[0]是外部元素，存储的是堆中{1，2，3}的地址</strong></p><p>arr【0】【0】则跟一维数组一样，是数值1，而不是地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br></code></pre></td></tr></table></figure><blockquote><p>此时的arr1[0] 则为null（arr1[1]arr1[2]也一样）</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo的博客</title>
    <link href="/2023/04/06/01-Hexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/04/06/01-Hexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="创建一个属于自己的博客"><a href="#创建一个属于自己的博客" class="headerlink" title="创建一个属于自己的博客"></a>创建一个属于自己的博客</h1><h2 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h2><h3 id="1-1、软件安装"><a href="#1-1、软件安装" class="headerlink" title="1.1、软件安装"></a>1.1、软件安装</h3><p>1.1.1、<strong>Nodejs</strong> : <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>1.1.2、<strong>Git</strong> : <a href="https://www.gitclone.com/docs/feature/github_git">https://www.gitclone.com/docs/feature/github_git</a></p><p>1.1.3、<strong>VSCode</strong> : <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> (也可以用别的编辑器)</p><h3 id="1-2、指令操作"><a href="#1-2、指令操作" class="headerlink" title="1.2、指令操作"></a>1.2、指令操作</h3><p>1.2.1、<strong>安装cnpm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>1.2.2、<strong>安装hexo</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>(卡住时也可以选择通过克隆安装)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/hexojs/hexo-starter.git ./<br></code></pre></td></tr></table></figure><p>1.2.3、<strong>初始化hexo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bas">hexo init<br></code></pre></td></tr></table></figure><p>1.2.4、<strong>预览博客</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><h3 id="1-3、安装主题"><a href="#1-3、安装主题" class="headerlink" title="1.3、安装主题"></a>1.3、安装主题</h3><p>在<a href="https://hexo.io/themes/%E4%B8%AD%E6%8C%91%E9%80%89%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%BB%E9%A2%98">https://hexo.io/themes/中挑选喜欢的主题</a></p><h2 id="2、上传博客"><a href="#2、上传博客" class="headerlink" title="2、上传博客"></a>2、上传博客</h2><h3 id="2-1、创建仓库"><a href="#2-1、创建仓库" class="headerlink" title="2.1、创建仓库"></a>2.1、创建仓库</h3><p>在<a href="http://github.com上创建仓库/">http://github.com上创建仓库</a></p><h3 id="2-2、配置密钥信息"><a href="#2-2、配置密钥信息" class="headerlink" title="2.2、配置密钥信息"></a>2.2、配置密钥信息</h3><p>2.2.1、出现hexo d上传不了的情况：可以尝试使用以下命令重新生成ssh密钥，邮箱换成自己的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C “ 邮箱“<br></code></pre></td></tr></table></figure><p>用于在本机生成密钥，生成在user/.ssh/id_rsa.pub文件中，复制里面的密钥在去GitHub中生成ssh Key即可</p><p><a href="https://imgse.com/i/pCm7MOP"><img src="https://s1.ax1x.com/2023/06/13/pCm7MOP.png" alt="pCm7MOP.png"></a></p><p>2.2.2、name随便写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email&quot;</span><br></code></pre></td></tr></table></figure><p>（具体操作参考<a href="https://www.bilibili.com/video/BV14G4y167b4/?spm_id_from=333.788&vd_source=fedd61ea761f3e4d96d202a264797a9d">【零基础】保姆级搭建个人博客hexo第三集_哔哩哔哩_bilibili</a>）</p><h3 id="2-3、指令上传"><a href="#2-3、指令上传" class="headerlink" title="2.3、指令上传"></a>2.3、指令上传</h3><p>用于下载上传插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="3、网站地址"><a href="#3、网站地址" class="headerlink" title="3、网站地址"></a>3、网站地址</h2><h3 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h3><p>网址：<a href="https://vercel.com/">https://vercel.com/</a> 用GitHub登录</p><p>通过腾讯云购买域名解析或者使用默认网址</p><h2 id="4、上传指令"><a href="#4、上传指令" class="headerlink" title="4、上传指令"></a>4、上传指令</h2><h3 id="4-1、启动本地服务器，用于预览主题"><a href="#4-1、启动本地服务器，用于预览主题" class="headerlink" title="4.1、启动本地服务器，用于预览主题"></a>4.1、启动本地服务器，用于预览主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><h3 id="4-2、生成网站静态文件到默认设置的public文件夹中"><a href="#4-2、生成网站静态文件到默认设置的public文件夹中" class="headerlink" title="4.2、生成网站静态文件到默认设置的public文件夹中"></a>4.2、生成网站静态文件到默认设置的public文件夹中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h3 id="4-3、自动生成网站静态文件，并部署到设定的仓库"><a href="#4-3、自动生成网站静态文件，并部署到设定的仓库" class="headerlink" title="4.3、自动生成网站静态文件，并部署到设定的仓库"></a>4.3、自动生成网站静态文件，并部署到设定的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><h3 id="4-4、清除缓存文件db-json和已生成的静态文件public"><a href="#4-4、清除缓存文件db-json和已生成的静态文件public" class="headerlink" title="4.4、清除缓存文件db.json和已生成的静态文件public"></a>4.4、清除缓存文件db.json和已生成的静态文件public</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>笔记类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2013/07/13/hello-world/"/>
    <url>/2013/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
